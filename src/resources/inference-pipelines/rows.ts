// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';

export class Rows extends APIResource {
  /**
   * Update an inference data point in an inference pipeline.
   */
  update(
    inferencePipelineId: string,
    params: RowUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<RowUpdateResponse> {
    const { inferenceId, ...body } = params;
    return this._client.put(`/inference-pipelines/${inferencePipelineId}/rows`, {
      query: { inferenceId },
      body,
      ...options,
    });
  }
}

export interface RowUpdateResponse {
  success: true;
}

export interface RowUpdateParams {
  /**
   * Query param: Specify the inference id as a query param.
   */
  inferenceId: string;

  /**
   * Body param:
   */
  row: unknown;

  /**
   * Body param:
   */
  config?: RowUpdateParams.Config | null;
}

export namespace RowUpdateParams {
  export interface Config {
    /**
     * Name of the column with the ground truths.
     */
    groundTruthColumnName?: string | null;

    /**
     * Name of the column with human feedback.
     */
    humanFeedbackColumnName?: string | null;

    /**
     * Name of the column with the inference ids. This is useful if you want to update
     * rows at a later point in time. If not provided, a unique id is generated by
     * Openlayer.
     */
    inferenceIdColumnName?: string | null;

    /**
     * Name of the column with the latencies.
     */
    latencyColumnName?: string | null;

    /**
     * Name of the column with the timestamps. Timestamps must be in UNIX sec format.
     * If not provided, the upload timestamp is used.
     */
    timestampColumnName?: string | null;
  }
}

export declare namespace Rows {
  export { type RowUpdateResponse as RowUpdateResponse, type RowUpdateParams as RowUpdateParams };
}
